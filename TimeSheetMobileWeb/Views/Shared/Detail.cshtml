@model TimeSheetMobileWeb.Models.BaseRowView
@using TimeSheetIBusiness
@using TimeSheetMobileWeb.Models
@using System.Globalization

<div data-role='page' data-theme='a' id='basedetail' data-title="@SiteResources.HomeMenuTimesheetDetail" data-leave-application='@SiteResources.LeaveApplication'>

    <div data-role='header'class='wrapper' data-theme='a' data-position='fixed'>
        <div>
            <div class='header' >
                <div class='leaveApplication' data-button-target="@Url.Action("Index", "Home")" ></div>
                <h2>@Model.Title</h2>
            </div>
            
            

        </div>   
     </div>
     <div data-role='content' class='wrapper' data-theme='a' id="contentroot">     
        <div data-role='content' data-theme='b' class='detailTitle'><span id = 'ProjectName_display' class='descriptiveDetail'>period of time</span></div>
        <div data-role='content' data-theme='a' class='detailTitle'><span id = 'AssignementName_display' class='descriptiveDetail'>period of time</span></div>
        <div>
            <div class='maininfo'>
            
                <div class='maininfocontent' data-role='content' data-theme='c' >
                @if (this.ViewContext.FormContext == null)
                {
                    this.ViewContext.FormContext = new FormContext();
                }
                <form id="detailform">
                    
                    <input id="datehidden" type="hidden" />
                    <script type="text/javascript">
                        function TSM_DetailTitle(x) {
                            if (x == "@UpdateViewBase.GetRowType(typeof(ActualWorkRow)).Code") return '@(Model.TaskRow ? ViewConfigurationTask.Default.ActualWorkA_FullName : ViewConfigurationRow.Default.ActualWorkA_FullName)';
                            if (x == "@UpdateViewBase.GetRowType(typeof(ActualOvertimeWorkRow)).Code") return '@(Model.TaskRow ? ViewConfigurationTask.Default.ActualOvertimeWorkA_FullName : ViewConfigurationRow.Default.ActualOvertimeWorkA_FullName)';
                            if (x == "@UpdateViewBase.GetRowType(typeof(NonBillableActualWorkRow)).Code") return '@ViewConfigurationRow.Default.ActualNonBillableWorkA_FullName';
                            if (x == "@UpdateViewBase.GetRowType(typeof(NonBillableOvertimeWorkRow)).Code") return '@ViewConfigurationRow.Default.ActualNonBillableOvertimeWorkA_FullName';
                            return "";
                        }
                    </script>
                    @{decimal? dummy = null;}
                    @if ((!Model.TaskRow) || (!ViewConfigurationTask.Default.NoTPData))
                    {  
                    
                        <span id='dayTemplate' style='display:none;'>
                       
                        <span class="ui-bar-c middleEnf">_p1lh_</span>
                        @Html.TypedTextBox("DayTimes[_plh_]", dummy, new { @class = "dayBox detailTB positive dayTime" }, null, ContentAlign.Right)
                        @Html.ValidationMessage("DayTimes[_plh_]", "*")
                       
                     </span>
                    <div class='timephasedvalues'>
                        <span id = 'rowsTitle' class="ui-bar-c middleEnf"></span>
                                <br />       
                         <span id="dayContainer">
                         </span>      
                    </div>
                    }
                    @Html.ViewList("row_choice", "row_choice_button")
                     @if ((Model.TaskRow && ViewConfigurationTask.Default.ActualWorkA && (!ViewConfigurationTask.Default.NoTPData)) ||
                        (!Model.TaskRow && ViewConfigurationRow.Default.ActualWorkA))
                     {
                        <div id='@("property_group_" + UpdateViewBase.GetRowType(typeof(ActualWorkRow)).Code)' class='row_choice'>
                   
                                @{var h = Html.CrossHelper(new ActualWorkRow());}
                                
                                
                                 @if ((Model.TaskRow && ViewConfigurationTask.Default.WorkA && ViewConfigurationTask.Default.WorkA_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.WorkA && ViewConfigurationRow.Default.WorkA_Edit))
                                 {
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.WorkA_FullName : ViewConfigurationRow.Default.WorkA_FullName)</span>
                                    @h.TypedTextBoxFor(m => m.WorkA, new { @class = "workBox detailTB positive" }, null, ContentAlign.Right)
                                    @h.ValidationMessageFor(m => m.WorkA, "*")<br />
                                 }
                                @if ((Model.TaskRow && ViewConfigurationTask.Default.RegularWorkA && ViewConfigurationTask.Default.RegularWorkA_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.RegularWorkA && ViewConfigurationRow.Default.RegularWorkA_Edit))
                                {
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.RegularWorkA_FullName : ViewConfigurationRow.Default.RegularWorkA_FullName)</span>
                                    @h.TypedTextBoxFor(m => m.RegularWorkA, new { @class = "workBox detailTB positive" }, null, ContentAlign.Right)
                                    @h.ValidationMessageFor(m => m.RegularWorkA, "*")<br />
                                }
                                @if ((Model.TaskRow && ViewConfigurationTask.Default.RemainingWorkA && ViewConfigurationTask.Default.RemainingWorkA_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.RemainingWorkA && ViewConfigurationRow.Default.RemainingWorkA_Edit))
                                {
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.RemainingWorkA_FullName : ViewConfigurationRow.Default.RemainingWorkA_FullName)</span>
                                    @h.TypedTextBoxFor(m => m.RemainingWorkA, new { @class = "workBox detailTB positive" }, null, ContentAlign.Right)
                                    @h.ValidationMessageFor(m => m.RemainingWorkA, "*")<br />
                                }
                                @if ((Model.TaskRow && ViewConfigurationTask.Default.StartA && ViewConfigurationTask.Default.StartA_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.StartA && ViewConfigurationRow.Default.StartA_Edit))
                                {
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.StartA_FullName : ViewConfigurationRow.Default.StartA_FullName)</span>
                                    
                                     @h.HiddenFor(m => m.StartA, new { @class = "detailTB" })
                                    <a href='#' id="@(h.PrefixedId(m => m.StartA) + h.ValueFor(m=>m.LineClass.Id) + "_display")" class='datepicker' data-format="@h.ClientFormatting(m => m.StartA)">@h.FormattedDisplay(m => m.StartA)</a>
                                    @h.ValidationMessageFor(m => m.StartA, "*")<br />
                                }
                                @if ((Model.TaskRow && ViewConfigurationTask.Default.FinishA && ViewConfigurationTask.Default.FinishA_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.FinishA && ViewConfigurationRow.Default.FinishA_Edit))
                                {
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.FinishA_FullName : ViewConfigurationRow.Default.FinishA_FullName)</span>
                                    
                                     @h.HiddenFor(m => m.FinishA, new { @class = "detailTB" })
                                    <a href='#' id="@(h.PrefixedId(m => m.FinishA) + h.ValueFor(m=>m.LineClass.Id) + "_display")" class='datepicker' data-format="@h.ClientFormatting(m => m.FinishA)">@h.FormattedDisplay(m => m.FinishA)</a>
                                    @h.ValidationMessageFor(m => m.FinishA, "*")<br />
                                }
                                
                                @if ((Model.TaskRow && ViewConfigurationTask.Default.ActualStartA && ViewConfigurationTask.Default.ActualStartA_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.ActualStartA && ViewConfigurationRow.Default.ActualStartA_Edit))
                                {
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.ActualStartA_FullName : ViewConfigurationRow.Default.ActualStartA_FullName)</span>
                                    
                                     @h.HiddenFor(m => m.ActualStartA, new { @class = "detailTB" })
                                    <a href='#' id="@(h.PrefixedId(m => m.ActualStartA) + h.ValueFor(m=>m.LineClass.Id) + "_display")" class='datepicker' data-format="@h.ClientFormatting(m => m.ActualStartA)">@h.FormattedDisplay(m => m.ActualStartA)</a>
                                    @h.ValidationMessageFor(m => m.ActualStartA, "*")<br />
                                }
                                @if ((Model.TaskRow && ViewConfigurationTask.Default.ActualFinishA && ViewConfigurationTask.Default.ActualFinishA_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.ActualFinishA && ViewConfigurationRow.Default.ActualFinishA_Edit))
                                {
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.ActualFinishA_FullName : ViewConfigurationRow.Default.ActualFinishA_FullName)</span>
                                    
                                     @h.HiddenFor(m => m.ActualFinishA, new { @class = "detailTB" })
                                    <a href='#' id="@(h.PrefixedId(m => m.ActualFinishA) + h.ValueFor(m=>m.LineClass.Id) + "_display")" class='datepicker' data-format="@h.ClientFormatting(m => m.ActualFinishA)">@h.FormattedDisplay(m => m.ActualFinishA)</a>
                                    @h.ValidationMessageFor(m => m.ActualFinishA, "*")<br />
                                }
                                @if ((Model.TaskRow && ViewConfigurationTask.Default.PercentWorkCompleteA && ViewConfigurationTask.Default.PercentWorkCompleteA_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.PercentWorkCompleteA && ViewConfigurationRow.Default.PercentWorkCompleteA_Edit))
                                {    
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.PercentWorkCompleteA_FullName : ViewConfigurationRow.Default.PercentWorkCompleteA_FullName)</span>
                                    @h.TypedTextBoxFor(m => m.PercentWorkCompleteA, new { @class = "workBox detailTB positive" }, null, ContentAlign.Right)
                                    @h.ValidationMessageFor(m => m.PercentWorkCompleteA, "*")
                                    <br />
                                }
                                @if ((Model.TaskRow && ViewConfigurationTask.Default.AssignmentUnitsA && ViewConfigurationTask.Default.AssignmentUnitsA_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.AssignmentUnitsA && ViewConfigurationRow.Default.AssignmentUnitsA_Edit))
                                {    
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.AssignmentUnitsA_FullName : ViewConfigurationRow.Default.AssignmentUnitsA_FullName)</span>
                                    @h.TypedTextBoxFor(m => m.AssignmentUnitsA, new { @class = "workBox detailTB positive" }, null, ContentAlign.Right)
                                    @h.ValidationMessageFor(m => m.AssignmentUnitsA, "*")
                                    <br />
                                }
                                @if ((Model.TaskRow && ViewConfigurationTask.Default.ConfirmedA && ViewConfigurationTask.Default.ConfirmedA_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.ConfirmedA && ViewConfigurationRow.Default.ConfirmedA_Edit))
                                {    
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.ConfirmedA_FullName : ViewConfigurationRow.Default.ConfirmedA_FullName)</span>
                                    @h.CheckBox("ConfirmedA", false, new { @class = "workBox detailBoolean" })
                                    @h.ValidationMessageFor(m => m.ConfirmedA, "*")
                                    <br />
                                }
                                 @if ((Model.TaskRow && ViewConfigurationTask.Default.CommentsA && ViewConfigurationTask.Default.CommentsA_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.CommentsA && ViewConfigurationRow.Default.CommentsA_Edit))
                                 {    
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.CommentsA_FullName : ViewConfigurationRow.Default.CommentsA_FullName)</span>
                                    <br />
                                    @h.TextAreaFor(m => m.CommentsA, new { @class = "fullscreen detailTB" })
                                    @h.ValidationMessageFor(m => m.CommentsA, "*")
                                    <br />
                                 }
                                 @if ((Model.TaskRow && ViewConfigurationTask.Default.WorkT && ViewConfigurationTask.Default.WorkT_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.WorkT && ViewConfigurationRow.Default.WorkT_Edit))
                                 {
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.WorkT_FullName : ViewConfigurationRow.Default.WorkT_FullName)</span>
                                    @h.TypedTextBoxFor(m => m.WorkT, new { @class = "workBox detailTB positive" }, null, ContentAlign.Right)
                                    @h.ValidationMessageFor(m => m.WorkT, "*")<br />
                                 }
                                @if ((Model.TaskRow && ViewConfigurationTask.Default.RegularWorkT && ViewConfigurationTask.Default.RegularWorkT_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.RegularWorkT && ViewConfigurationRow.Default.RegularWorkT_Edit))
                                {
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.RegularWorkT_FullName : ViewConfigurationRow.Default.RegularWorkT_FullName)</span>
                                    @h.TypedTextBoxFor(m => m.RegularWorkT, new { @class = "workBox detailTB positive" }, null, ContentAlign.Right)
                                    @h.ValidationMessageFor(m => m.RegularWorkT, "*")<br />
                                }
                                @if ((Model.TaskRow && ViewConfigurationTask.Default.RemainingWorkT && ViewConfigurationTask.Default.RemainingWorkT_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.RemainingWorkT && ViewConfigurationRow.Default.RemainingWorkT_Edit))
                                {
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.RemainingWorkT_FullName : ViewConfigurationRow.Default.RemainingWorkT_FullName)</span>
                                    @h.TypedTextBoxFor(m => m.RemainingWorkT, new { @class = "workBox detailTB positive" }, null, ContentAlign.Right)
                                    @h.ValidationMessageFor(m => m.RemainingWorkT, "*")<br />
                                }
                                @if ((Model.TaskRow && ViewConfigurationTask.Default.ActualWorkT && ViewConfigurationTask.Default.ActualWorkT_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.ActualWorkT && ViewConfigurationRow.Default.ActualWorkT_Edit))
                                {
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.ActualWorkT_FullName : ViewConfigurationRow.Default.ActualWorkT_FullName)</span>
                                    @h.TypedTextBoxFor(m => m.ActualWorkT, new { @class = "workBox detailTB positive" }, null, ContentAlign.Right)
                                    @h.ValidationMessageFor(m => m.ActualWorkT, "*")<br />
                                }
                                @if ((Model.TaskRow && ViewConfigurationTask.Default.StartT && ViewConfigurationTask.Default.StartT_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.StartT && ViewConfigurationRow.Default.StartT_Edit))
                                {
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.StartT_FullName : ViewConfigurationRow.Default.StartT_FullName)</span>
                                    
                                     @h.HiddenFor(m => m.StartT, new { @class = "detailTB" })
                                    <a href='#' id="@(h.PrefixedId(m => m.StartT) + h.ValueFor(m=>m.LineClass.Id) + "_display")" class='datepicker' data-format="@h.ClientFormatting(m => m.StartT)">@h.FormattedDisplay(m => m.StartT)</a>
                                    @h.ValidationMessageFor(m => m.StartT, "*")<br />
                                }
                                @if ((Model.TaskRow && ViewConfigurationTask.Default.FinishT && ViewConfigurationTask.Default.FinishT_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.FinishT && ViewConfigurationRow.Default.FinishT_Edit))
                                {
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.FinishT_FullName : ViewConfigurationRow.Default.FinishT_FullName)</span>
                                    
                                     @h.HiddenFor(m => m.FinishT, new { @class = "detailTB" })
                                    <a href='#' id="@(h.PrefixedId(m => m.FinishT) + h.ValueFor(m=>m.LineClass.Id) + "_display")" class='datepicker' data-format="@h.ClientFormatting(m => m.FinishT)">@h.FormattedDisplay(m => m.FinishT)</a>
                                    @h.ValidationMessageFor(m => m.FinishT, "*")<br />
                                }
                                
                                @if ((Model.TaskRow && ViewConfigurationTask.Default.ResumeT && ViewConfigurationTask.Default.ResumeT_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.ResumeT && ViewConfigurationRow.Default.ResumeT_Edit))
                                {
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.ResumeT_FullName : ViewConfigurationRow.Default.ResumeT_FullName)</span>
                                    
                                     @h.HiddenFor(m => m.ResumeT, new { @class = "detailTB" })
                                    <a href='#' id="@(h.PrefixedId(m => m.ResumeT) + h.ValueFor(m=>m.LineClass.Id) + "_display")" class='datepicker' data-format="@h.ClientFormatting(m => m.ResumeT)">@h.FormattedDisplay(m => m.ResumeT)</a>
                                    @h.ValidationMessageFor(m => m.ResumeT, "*")<br />
                                }
                                @if ((Model.TaskRow && ViewConfigurationTask.Default.DeadlineT && ViewConfigurationTask.Default.DeadlineT_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.DeadlineT && ViewConfigurationRow.Default.DeadlineT_Edit))
                                {
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.DeadlineT_FullName : ViewConfigurationRow.Default.DeadlineT_FullName)</span>
                                    
                                     @h.HiddenFor(m => m.DeadlineT, new { @class = "detailTB" })
                                    <a href='#' id="@(h.PrefixedId(m => m.DeadlineT) + h.ValueFor(m=>m.LineClass.Id) + "_display")" class='datepicker' data-format="@h.ClientFormatting(m => m.DeadlineT)">@h.FormattedDisplay(m => m.DeadlineT)</a>
                                    @h.ValidationMessageFor(m => m.DeadlineT, "*")<br />
                                }
                                @if ((Model.TaskRow && ViewConfigurationTask.Default.DurationT && ViewConfigurationTask.Default.DurationT_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.DurationT && ViewConfigurationRow.Default.DurationT_Edit))
                                {
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.DurationT_FullName : ViewConfigurationRow.Default.DurationT_FullName)</span>
                                    @h.TypedTextBoxFor(m => m.DurationT, new { @class = "workBox detailTB positive" }, null, ContentAlign.Right)
                                    @h.ValidationMessageFor(m => m.DurationT, "*")<br />
                                }
                                @if ((Model.TaskRow && ViewConfigurationTask.Default.RemainingDurationT && ViewConfigurationTask.Default.RemainingDurationT_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.RemainingDurationT && ViewConfigurationRow.Default.RemainingDurationT_Edit))
                                {
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.RemainingDurationT_FullName : ViewConfigurationRow.Default.RemainingDurationT_FullName)</span>
                                    @h.TypedTextBoxFor(m => m.RemainingDurationT, new { @class = "workBox detailTB positive" }, null, ContentAlign.Right)
                                    @h.ValidationMessageFor(m => m.RemainingDurationT, "*")<br />
                                }
                                @if ((Model.TaskRow && ViewConfigurationTask.Default.TaskNameT && ViewConfigurationTask.Default.TaskNameT_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.TaskNameT && ViewConfigurationRow.Default.TaskNameT_Edit))
                                {
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.TaskNameT_FullName : ViewConfigurationRow.Default.TaskNameT_FullName)</span><br />
                                    @h.TextBoxFor(m => m.TaskNameT, new { @class = "fullscreen detailTB" })
                                    @h.ValidationMessageFor(m => m.TaskNameT, "*")<br />
                                }
                                @if ((Model.TaskRow && ViewConfigurationTask.Default.PercentCompleteT && ViewConfigurationTask.Default.PercentCompleteT_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.PercentCompleteT && ViewConfigurationRow.Default.PercentCompleteT_Edit))
                                {    
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.PercentCompleteT_FullName : ViewConfigurationRow.Default.PercentCompleteT_FullName)</span>
                                    @h.TypedTextBoxFor(m => m.PercentCompleteT, new { @class = "workBox detailTB positive" }, null, ContentAlign.Right)
                                    @h.ValidationMessageFor(m => m.PercentCompleteT, "*")
                                    <br />
                                }
                                @if ((Model.TaskRow && ViewConfigurationTask.Default.PercentWorkCompleteT && ViewConfigurationTask.Default.PercentWorkCompleteT_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.PercentWorkCompleteT && ViewConfigurationRow.Default.PercentWorkCompleteT_Edit))
                                {    
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.PercentWorkCompleteT_FullName : ViewConfigurationRow.Default.PercentWorkCompleteT_FullName)</span>
                                    @h.TypedTextBoxFor(m => m.PercentWorkCompleteT, new { @class = "workBox detailTB positive" }, null, ContentAlign.Right)
                                    @h.ValidationMessageFor(m => m.PercentWorkCompleteT, "*")
                                    <br />
                                }
                                @if ((Model.TaskRow && ViewConfigurationTask.Default.PhysicalPercentCompleteT && ViewConfigurationTask.Default.PhysicalPercentCompleteT_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.PhysicalPercentCompleteT && ViewConfigurationRow.Default.PhysicalPercentCompleteT_Edit))
                                {    
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.PhysicalPercentCompleteT_FullName : ViewConfigurationRow.Default.PhysicalPercentCompleteT_FullName)</span>
                                    @h.TypedTextBoxFor(m => m.PhysicalPercentCompleteT, new { @class = "workBox detailTB positive" }, null, ContentAlign.Right)
                                    @h.ValidationMessageFor(m => m.PhysicalPercentCompleteT, "*")
                                    <br />
                                }
                                  @if ((ViewConfigurationRow.Default.CustomFields != null)
                                    )
                                  {
                                      foreach (var field in ViewConfigurationRow.Default.CustomFields)
                                      {
                                          if (field.Visible)
                                          {
                                        <span class="ui-bar-c middleEnf">@field.Name</span>

                                      <a href='#' id='@(h.PrefixedId("") + "_cf_date")' name ='@field.Name' class='datepicker detailTBCS Date' valuetype='Date'>No Date</a>
                                    @h.ValidationMessage("@field.Name", "*")
                                    <input id='@(h.PrefixedId("") + "_cf_cost")' name ='@field.Name' type="text"  class = "workBox detailTBCS positive Cost" valuetype='Cost'/>
                                     <input id='@(h.PrefixedId("") + "_cf_dur")' name ='@field.Name' type="text"  class = "workBox detailTBCS positive Duration" valuetype='Duration'/>
                                     <input id='@(h.PrefixedId("") + "_cf_num")' name ='@field.Name' type="text"  class = "workBox detailTBCS positive Number" valuetype='Number'/>
                                      <input id='@(h.PrefixedId("") + "_cf_text")' name ='@field.Name' type="text"  class = "workBox detailTBCS Text" valuetype='Text'/>
                                      <span id='@(h.PrefixedId("") + "_cf_flag")' name ='@field.Name' valuetype='Flag' class = "detailTBCS Flag"><input  type="radio"   name ='@field.Name'  value="Yes" />Yes<input  type="radio"   name ='@field.Name'  value="No" />No</span>
                                      <span id='@(h.PrefixedId("") + "_cf_lookup")' name ='@field.Name' valuetype='Lookup' class = "detailTBCS Lookup"></span>
                                      <br/>
                                      
                                          }
                                      }
                                  }
                               
                                
                        </div> 
                     }                  
                    @if ((Model.TaskRow && ViewConfigurationTask.Default.ActualOvertimeWorkA && (!ViewConfigurationTask.Default.NoTPData)) ||
                        (!Model.TaskRow && ViewConfigurationRow.Default.ActualOvertimeWorkA))
                    {
                        <div id='@("property_group_" + UpdateViewBase.GetRowType(typeof(ActualOvertimeWorkRow)).Code)' class='row_choice'>
                              
                                @{var h = Html.CrossHelper(new ActualOvertimeWorkRow());}
                                @if ((Model.TaskRow && ViewConfigurationTask.Default.OvertimeWorkA && ViewConfigurationTask.Default.OvertimeWorkA_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.OvertimeWorkA && ViewConfigurationRow.Default.OvertimeWorkA_Edit))
                                {
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.OvertimeWorkA_FullName : ViewConfigurationRow.Default.OvertimeWorkA_FullName)</span>
                                    @h.TypedTextBoxFor(m => m.OvertimeWorkA, new { @class = "workBox detailTB positive" }, null, ContentAlign.Right)
                                    @h.ValidationMessageFor(m => m.OvertimeWorkA, "*")<br />
                                }
                                @if ((Model.TaskRow && ViewConfigurationTask.Default.OvertimeWorkT && ViewConfigurationTask.Default.OvertimeWorkT_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.OvertimeWorkT && ViewConfigurationRow.Default.OvertimeWorkT_Edit))
                                {
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.OvertimeWorkT_FullName : ViewConfigurationRow.Default.OvertimeWorkT_FullName)</span>
                                    @h.TypedTextBoxFor(m => m.OvertimeWorkT, new { @class = "workBox detailTB positive" }, null, ContentAlign.Right)
                                    @h.ValidationMessageFor(m => m.OvertimeWorkT, "*")<br />
                                }
                                @if ((Model.TaskRow && ViewConfigurationTask.Default.RemainingOvertimeWorkT && ViewConfigurationTask.Default.RemainingOvertimeWorkT_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.RemainingOvertimeWorkT && ViewConfigurationRow.Default.RemainingOvertimeWorkT_Edit))
                                {
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.RemainingOvertimeWorkT_FullName : ViewConfigurationRow.Default.RemainingOvertimeWorkT_FullName)</span>
                                    @h.TypedTextBoxFor(m => m.RemainingOvertimeWorkT, new { @class = "workBox detailTB positive" }, null, ContentAlign.Right)
                                    @h.ValidationMessageFor(m => m.RemainingOvertimeWorkT, "*")<br />
                                }
                                 
                                
                        </div>
                    }
                    @if (Model.TaskRow && ViewConfigurationTask.Default.ActualWorkA && ViewConfigurationTask.Default.NoTPData)
                    {
                        <div id='@("property_group_" + UpdateViewBase.GetRowType(typeof(SingleValuesRow)).Code)' class='row_choice'>
                   
                                @{var h = Html.CrossHelper(new SingleValuesRow());}
                                
                                
                                 @if ((Model.TaskRow && ViewConfigurationTask.Default.WorkA && ViewConfigurationTask.Default.WorkA_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.WorkA && ViewConfigurationRow.Default.WorkA_Edit))
                                 {
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.WorkA_FullName : ViewConfigurationRow.Default.WorkA_FullName)</span>
                                    @h.TypedTextBoxFor(m => m.WorkA, new { @class = "workBox detailTB positive" }, null, ContentAlign.Right)
                                    @h.ValidationMessageFor(m => m.WorkA, "*")<br />
                                 }
                                @if ((Model.TaskRow && ViewConfigurationTask.Default.RegularWorkA && ViewConfigurationTask.Default.RegularWorkA_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.RegularWorkA && ViewConfigurationRow.Default.RegularWorkA_Edit))
                                {
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.RegularWorkA_FullName : ViewConfigurationRow.Default.RegularWorkA_FullName)</span>
                                    @h.TypedTextBoxFor(m => m.RegularWorkA, new { @class = "workBox detailTB positive" }, null, ContentAlign.Right)
                                    @h.ValidationMessageFor(m => m.RegularWorkA, "*")<br />
                                }
                                @if ((Model.TaskRow && ViewConfigurationTask.Default.RemainingWorkA && ViewConfigurationTask.Default.RemainingWorkA_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.RemainingWorkA && ViewConfigurationRow.Default.RemainingWorkA_Edit))
                                {
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.RemainingWorkA_FullName : ViewConfigurationRow.Default.RemainingWorkA_FullName)</span>
                                    @h.TypedTextBoxFor(m => m.RemainingWorkA, new { @class = "workBox detailTB positive" }, null, ContentAlign.Right)
                                    @h.ValidationMessageFor(m => m.RemainingWorkA, "*")<br />
                                }
                                @if ((Model.TaskRow && ViewConfigurationTask.Default.StartA && ViewConfigurationTask.Default.StartA_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.StartA && ViewConfigurationRow.Default.StartA_Edit))
                                {
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.StartA_FullName : ViewConfigurationRow.Default.StartA_FullName)</span>
                                    
                                     @h.HiddenFor(m => m.StartA, new { @class = "detailTB" })
                                    <a href='#' id="@(h.PrefixedId(m => m.StartA) + h.ValueFor(m=>m.LineClass.Id) + "_display")" class='datepicker' data-format="@h.ClientFormatting(m => m.StartA)">@h.FormattedDisplay(m => m.StartA)</a>
                                    @h.ValidationMessageFor(m => m.StartA, "*")<br />
                                }
                                @if ((Model.TaskRow && ViewConfigurationTask.Default.FinishA && ViewConfigurationTask.Default.FinishA_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.FinishA && ViewConfigurationRow.Default.FinishA_Edit))
                                {
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.FinishA_FullName : ViewConfigurationRow.Default.FinishA_FullName)</span>
                                    
                                     @h.HiddenFor(m => m.FinishA, new { @class = "detailTB" })
                                    <a href='#' id="@(h.PrefixedId(m => m.FinishA) + h.ValueFor(m=>m.LineClass.Id) + "_display")" class='datepicker' data-format="@h.ClientFormatting(m => m.FinishA)">@h.FormattedDisplay(m => m.FinishA)</a>
                                    @h.ValidationMessageFor(m => m.FinishA, "*")<br />
                                }
                                
                                @if ((Model.TaskRow && ViewConfigurationTask.Default.ActualStartA && ViewConfigurationTask.Default.ActualStartA_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.ActualStartA && ViewConfigurationRow.Default.ActualStartA_Edit))
                                {
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.ActualStartA_FullName : ViewConfigurationRow.Default.ActualStartA_FullName)</span>
                                    
                                     @h.HiddenFor(m => m.ActualStartA, new { @class = "detailTB" })
                                    <a href='#' id="@(h.PrefixedId(m => m.ActualStartA) + h.ValueFor(m=>m.LineClass.Id) + "_display")" class='datepicker' data-format="@h.ClientFormatting(m => m.ActualStartA)">@h.FormattedDisplay(m => m.ActualStartA)</a>
                                    @h.ValidationMessageFor(m => m.ActualStartA, "*")<br />
                                }
                                @if ((Model.TaskRow && ViewConfigurationTask.Default.ActualFinishA && ViewConfigurationTask.Default.ActualFinishA_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.ActualFinishA && ViewConfigurationRow.Default.ActualFinishA_Edit))
                                {
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.ActualFinishA_FullName : ViewConfigurationRow.Default.ActualFinishA_FullName)</span>
                                    
                                     @h.HiddenFor(m => m.ActualFinishA, new { @class = "detailTB" })
                                    <a href='#' id="@(h.PrefixedId(m => m.ActualFinishA) + h.ValueFor(m=>m.LineClass.Id) + "_display")" class='datepicker' data-format="@h.ClientFormatting(m => m.ActualFinishA)">@h.FormattedDisplay(m => m.ActualFinishA)</a>
                                    @h.ValidationMessageFor(m => m.ActualFinishA, "*")<br />
                                }
                                @if ((Model.TaskRow && ViewConfigurationTask.Default.PercentWorkCompleteA && ViewConfigurationTask.Default.PercentWorkCompleteA_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.PercentWorkCompleteA && ViewConfigurationRow.Default.PercentWorkCompleteA_Edit))
                                {    
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.PercentWorkCompleteA_FullName : ViewConfigurationRow.Default.PercentWorkCompleteA_FullName)</span>
                                    @h.TypedTextBoxFor(m => m.PercentWorkCompleteA, new { @class = "workBox detailTB positive" }, null, ContentAlign.Right)
                                    @h.ValidationMessageFor(m => m.PercentWorkCompleteA, "*")
                                    <br />
                                }
                                @if ((Model.TaskRow && ViewConfigurationTask.Default.AssignmentUnitsA && ViewConfigurationTask.Default.AssignmentUnitsA_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.AssignmentUnitsA && ViewConfigurationRow.Default.AssignmentUnitsA_Edit))
                                {    
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.AssignmentUnitsA_FullName : ViewConfigurationRow.Default.AssignmentUnitsA_FullName)</span>
                                    @h.TypedTextBoxFor(m => m.AssignmentUnitsA, new { @class = "workBox detailTB positive" }, null, ContentAlign.Right)
                                    @h.ValidationMessageFor(m => m.AssignmentUnitsA, "*")
                                    <br />
                                }
                                @if ((Model.TaskRow && ViewConfigurationTask.Default.ConfirmedA && ViewConfigurationTask.Default.ConfirmedA_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.ConfirmedA && ViewConfigurationRow.Default.ConfirmedA_Edit))
                                {    
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.ConfirmedA_FullName : ViewConfigurationRow.Default.ConfirmedA_FullName)</span>
                                    @h.CheckBox("ConfirmedA", false, new { @class = "workBox detailBoolean" })
                                    @h.ValidationMessageFor(m => m.ConfirmedA, "*")
                                    <br />
                                }
                                 @if ((Model.TaskRow && ViewConfigurationTask.Default.CommentsA && ViewConfigurationTask.Default.CommentsA_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.CommentsA && ViewConfigurationRow.Default.CommentsA_Edit))
                                 {    
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.CommentsA_FullName : ViewConfigurationRow.Default.CommentsA_FullName)</span>
                                    <br />
                                    @h.TextAreaFor(m => m.CommentsA, new { @class = "fullscreen detailTB" })
                                    @h.ValidationMessageFor(m => m.CommentsA, "*")
                                    <br />
                                 }
                                 @if ((Model.TaskRow && ViewConfigurationTask.Default.WorkT && ViewConfigurationTask.Default.WorkT_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.WorkT && ViewConfigurationRow.Default.WorkT_Edit))
                                 {
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.WorkT_FullName : ViewConfigurationRow.Default.WorkT_FullName)</span>
                                    @h.TypedTextBoxFor(m => m.WorkT, new { @class = "workBox detailTB positive" }, null, ContentAlign.Right)
                                    @h.ValidationMessageFor(m => m.WorkT, "*")<br />
                                 }
                                @if ((Model.TaskRow && ViewConfigurationTask.Default.RegularWorkT && ViewConfigurationTask.Default.RegularWorkT_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.RegularWorkT && ViewConfigurationRow.Default.RegularWorkT_Edit))
                                {
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.RegularWorkT_FullName : ViewConfigurationRow.Default.RegularWorkT_FullName)</span>
                                    @h.TypedTextBoxFor(m => m.RegularWorkT, new { @class = "workBox detailTB positive" }, null, ContentAlign.Right)
                                    @h.ValidationMessageFor(m => m.RegularWorkT, "*")<br />
                                }
                                @if ((Model.TaskRow && ViewConfigurationTask.Default.RemainingWorkT && ViewConfigurationTask.Default.RemainingWorkT_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.RemainingWorkT && ViewConfigurationRow.Default.RemainingWorkT_Edit))
                                {
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.RemainingWorkT_FullName : ViewConfigurationRow.Default.RemainingWorkT_FullName)</span>
                                    @h.TypedTextBoxFor(m => m.RemainingWorkT, new { @class = "workBox detailTB positive" }, null, ContentAlign.Right)
                                    @h.ValidationMessageFor(m => m.RemainingWorkT, "*")<br />
                                }
                                @if ((Model.TaskRow && ViewConfigurationTask.Default.ActualWorkT && ViewConfigurationTask.Default.ActualWorkT_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.ActualWorkT && ViewConfigurationRow.Default.ActualWorkT_Edit))
                                {
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.ActualWorkT_FullName : ViewConfigurationRow.Default.ActualWorkT_FullName)</span>
                                    @h.TypedTextBoxFor(m => m.ActualWorkT, new { @class = "workBox detailTB positive" }, null, ContentAlign.Right)
                                    @h.ValidationMessageFor(m => m.ActualWorkT, "*")<br />
                                }
                                @if ((Model.TaskRow && ViewConfigurationTask.Default.StartT && ViewConfigurationTask.Default.StartT_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.StartT && ViewConfigurationRow.Default.StartT_Edit))
                                {
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.StartT_FullName : ViewConfigurationRow.Default.StartT_FullName)</span>
                                    
                                     @h.HiddenFor(m => m.StartT, new { @class = "detailTB" })
                                    <a href='#' id="@(h.PrefixedId(m => m.StartT) + h.ValueFor(m=>m.LineClass.Id) + "_display")" class='datepicker' data-format="@h.ClientFormatting(m => m.StartT)">@h.FormattedDisplay(m => m.StartT)</a>
                                    @h.ValidationMessageFor(m => m.StartT, "*")<br />
                                }
                                @if ((Model.TaskRow && ViewConfigurationTask.Default.FinishT && ViewConfigurationTask.Default.FinishT_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.FinishT && ViewConfigurationRow.Default.FinishT_Edit))
                                {
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.FinishT_FullName : ViewConfigurationRow.Default.FinishT_FullName)</span>
                                    
                                     @h.HiddenFor(m => m.FinishT, new { @class = "detailTB" })
                                    <a href='#' id="@(h.PrefixedId(m => m.FinishT) + h.ValueFor(m=>m.LineClass.Id) + "_display")" class='datepicker' data-format="@h.ClientFormatting(m => m.FinishT)">@h.FormattedDisplay(m => m.FinishT)</a>
                                    @h.ValidationMessageFor(m => m.FinishT, "*")<br />
                                }
                                
                                @if ((Model.TaskRow && ViewConfigurationTask.Default.ResumeT && ViewConfigurationTask.Default.ResumeT_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.ResumeT && ViewConfigurationRow.Default.ResumeT_Edit))
                                {
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.ResumeT_FullName : ViewConfigurationRow.Default.ResumeT_FullName)</span>
                                    
                                     @h.HiddenFor(m => m.ResumeT, new { @class = "detailTB" })
                                    <a href='#' id="@(h.PrefixedId(m => m.ResumeT) + h.ValueFor(m=>m.LineClass.Id) + "_display")" class='datepicker' data-format="@h.ClientFormatting(m => m.ResumeT)">@h.FormattedDisplay(m => m.ResumeT)</a>
                                    @h.ValidationMessageFor(m => m.ResumeT, "*")<br />
                                }
                                @if ((Model.TaskRow && ViewConfigurationTask.Default.DeadlineT && ViewConfigurationTask.Default.DeadlineT_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.DeadlineT && ViewConfigurationRow.Default.DeadlineT_Edit))
                                {
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.DeadlineT_FullName : ViewConfigurationRow.Default.DeadlineT_FullName)</span>
                                    
                                     @h.HiddenFor(m => m.DeadlineT, new { @class = "detailTB" })
                                    <a href='#' id="@(h.PrefixedId(m => m.DeadlineT) + h.ValueFor(m=>m.LineClass.Id) + "_display")" class='datepicker' data-format="@h.ClientFormatting(m => m.DeadlineT)">@h.FormattedDisplay(m => m.DeadlineT)</a>
                                    @h.ValidationMessageFor(m => m.DeadlineT, "*")<br />
                                }
                                @if ((Model.TaskRow && ViewConfigurationTask.Default.DurationT && ViewConfigurationTask.Default.DurationT_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.DurationT && ViewConfigurationRow.Default.DurationT_Edit))
                                {
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.DurationT_FullName : ViewConfigurationRow.Default.DurationT_FullName)</span>
                                    @h.TypedTextBoxFor(m => m.DurationT, new { @class = "workBox detailTB positive" }, null, ContentAlign.Right)
                                    @h.ValidationMessageFor(m => m.DurationT, "*")<br />
                                }
                                @if ((Model.TaskRow && ViewConfigurationTask.Default.RemainingDurationT && ViewConfigurationTask.Default.RemainingDurationT_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.RemainingDurationT && ViewConfigurationRow.Default.RemainingDurationT_Edit))
                                {
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.RemainingDurationT_FullName : ViewConfigurationRow.Default.RemainingDurationT_FullName)</span>
                                    @h.TypedTextBoxFor(m => m.RemainingDurationT, new { @class = "workBox detailTB positive" }, null, ContentAlign.Right)
                                    @h.ValidationMessageFor(m => m.RemainingDurationT, "*")<br />
                                }
                                @if ((Model.TaskRow && ViewConfigurationTask.Default.TaskNameT && ViewConfigurationTask.Default.TaskNameT_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.TaskNameT && ViewConfigurationRow.Default.TaskNameT_Edit))
                                {
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.TaskNameT_FullName : ViewConfigurationRow.Default.TaskNameT_FullName)</span><br />
                                    @h.TextBoxFor(m => m.TaskNameT, new { @class = "fullscreen detailTB" })
                                    @h.ValidationMessageFor(m => m.TaskNameT, "*")<br />
                                }
                                @if ((Model.TaskRow && ViewConfigurationTask.Default.PercentCompleteT && ViewConfigurationTask.Default.PercentCompleteT_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.PercentCompleteT && ViewConfigurationRow.Default.PercentCompleteT_Edit))
                                {    
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.PercentCompleteT_FullName : ViewConfigurationRow.Default.PercentCompleteT_FullName)</span>
                                    @h.TypedTextBoxFor(m => m.PercentCompleteT, new { @class = "workBox detailTB positive" }, null, ContentAlign.Right)
                                    @h.ValidationMessageFor(m => m.PercentCompleteT, "*")
                                    <br />
                                }
                                @if ((Model.TaskRow && ViewConfigurationTask.Default.PercentWorkCompleteT && ViewConfigurationTask.Default.PercentWorkCompleteT_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.PercentWorkCompleteT && ViewConfigurationRow.Default.PercentWorkCompleteT_Edit))
                                {    
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.PercentWorkCompleteT_FullName : ViewConfigurationRow.Default.PercentWorkCompleteT_FullName)</span>
                                    @h.TypedTextBoxFor(m => m.PercentWorkCompleteT, new { @class = "workBox detailTB positive" }, null, ContentAlign.Right)
                                    @h.ValidationMessageFor(m => m.PercentWorkCompleteT, "*")
                                    <br />
                                }
                                @if ((Model.TaskRow && ViewConfigurationTask.Default.PhysicalPercentCompleteT && ViewConfigurationTask.Default.PhysicalPercentCompleteT_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.PhysicalPercentCompleteT && ViewConfigurationRow.Default.PhysicalPercentCompleteT_Edit))
                                {    
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.PhysicalPercentCompleteT_FullName : ViewConfigurationRow.Default.PhysicalPercentCompleteT_FullName)</span>
                                    @h.TypedTextBoxFor(m => m.PhysicalPercentCompleteT, new { @class = "workBox detailTB positive" }, null, ContentAlign.Right)
                                    @h.ValidationMessageFor(m => m.PhysicalPercentCompleteT, "*")
                                    <br />
                                }
                                @if ((Model.TaskRow && ViewConfigurationTask.Default.OvertimeWorkA && ViewConfigurationTask.Default.OvertimeWorkA_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.OvertimeWorkA && ViewConfigurationRow.Default.OvertimeWorkA_Edit))
                                {
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.OvertimeWorkA_FullName : ViewConfigurationRow.Default.OvertimeWorkA_FullName)</span>
                                    @h.TypedTextBoxFor(m => m.OvertimeWorkA, new { @class = "workBox detailTB positive" }, null, ContentAlign.Right)
                                    @h.ValidationMessageFor(m => m.OvertimeWorkA, "*")<br />
                                }
                                @if ((Model.TaskRow && ViewConfigurationTask.Default.OvertimeWorkT && ViewConfigurationTask.Default.OvertimeWorkT_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.OvertimeWorkT && ViewConfigurationRow.Default.OvertimeWorkT_Edit))
                                {
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.OvertimeWorkT_FullName : ViewConfigurationRow.Default.OvertimeWorkT_FullName)</span>
                                    @h.TypedTextBoxFor(m => m.OvertimeWorkT, new { @class = "workBox detailTB positive" }, null, ContentAlign.Right)
                                    @h.ValidationMessageFor(m => m.OvertimeWorkT, "*")<br />
                                }
                                @if ((Model.TaskRow && ViewConfigurationTask.Default.RemainingOvertimeWorkT && ViewConfigurationTask.Default.RemainingOvertimeWorkT_Edit) ||
                                    (!Model.TaskRow && ViewConfigurationRow.Default.RemainingOvertimeWorkT && ViewConfigurationRow.Default.RemainingOvertimeWorkT_Edit))
                                {
                                    <span class="ui-bar-c middleEnf">@(Model.TaskRow ? ViewConfigurationTask.Default.RemainingOvertimeWorkT_FullName : ViewConfigurationRow.Default.RemainingOvertimeWorkT_FullName)</span>
                                    @h.TypedTextBoxFor(m => m.RemainingOvertimeWorkT, new { @class = "workBox detailTB positive" }, null, ContentAlign.Right)
                                    @h.ValidationMessageFor(m => m.RemainingOvertimeWorkT, "*")<br />
                                }
                                 @if (Model.TaskRow && (ViewConfigurationTask.Default.CustomFields != null)
                                    )
                                  {
                                      foreach (var field in ViewConfigurationTask.Default.CustomFields)
                                      {
                                          if (field.Visible)
                                          {
                                        <span class="ui-bar-c middleEnf">@field.Name</span>

                                      <a href='#' id='@(h.PrefixedId("") + "_cf_date")' name ='@field.Name' class='datepicker detailTBCS Date' valuetype='Date'>No Date</a>
                                    @h.ValidationMessage("@field.Name", "*")
                                    <input id='@(h.PrefixedId("") + "_cf_cost")' name ='@field.Name' type="text"  class = "workBox detailTBCS positive Cost" valuetype='Cost'/>
                                     <input id='@(h.PrefixedId("") + "_cf_dur")' name ='@field.Name' type="text"  class = "workBox detailTBCS positive Duration" valuetype='Duration'/>
                                     <input id='@(h.PrefixedId("") + "_cf_num")' name ='@field.Name' type="text"  class = "workBox detailTBCS positive Number" valuetype='Number'/>
                                      <input id='@(h.PrefixedId("") + "_cf_text")' name ='@field.Name' type="text"  class = "workBox detailTBCS Text" valuetype='Text'/>
                                      <span id='@(h.PrefixedId("") + "_cf_flag")' name ='@field.Name' valuetype='Flag' class = "detailTBCS Flag"><input  type="radio"   name ='@field.Name'  value="Yes" />Yes<input  type="radio"   name ='@field.Name'  value="No" />No</span>
                                      <span id='@(h.PrefixedId("") + "_cf_lookup")' name ='@field.Name' valuetype='Lookup' class = "detailTBCS Lookup"></span>
                                      <br/>
                                      
                                          }
                                      }
                                  }
                                
                        </div> 
                    }            
                     @if (!Model.TaskRow)
                     {
                        <div id='@("property_group_" + UpdateViewBase.GetRowType(typeof(AdministrativeRow)).Code)' class='row_choice'>
                              
                        </div>
                     }
                     @if (!Model.TaskRow && ViewConfigurationRow.Default.ActualNonBillableWorkA)
                     {
                        <div id='@("property_group_" + UpdateViewBase.GetRowType(typeof(NonBillableActualWorkRow)).Code)' class='row_choice'>
                              
                        </div>
                     }
                     @if (!Model.TaskRow && ViewConfigurationRow.Default.ActualNonBillableOvertimeWorkA)
                     {
                          <div id='@("property_group_" + UpdateViewBase.GetRowType(typeof(NonBillableOvertimeWorkRow)).Code)' class='row_choice'>
                                
                          </div>
                     }
                      
                </form>
                </div>
            </div>
        </div>
    </div>
    <script type="text/javascript">
        $(document).ready(function () {
            $("input:text, textarea").focus(function () { $(this).select(); });
        });
    </script>
    <div data-role='footer' data-position='fixed' class='wrapper' data-theme='a'>
        <div>
                <div class="ui-grid-a">
                    <div class="ui-block-a" ><input id="btnConfirmRow" type="button" value="" class='main-icon-submit main-icon-save confirm' data-button-target='basedetail'/></div>
                    <div class="ui-block-b" ><input id="btnCancelRow" type="button" value="" class='main-icon-submit main-icon-cancel cancel' data-button-target='basedetail'/></div>
                </div>
            <div class='footer-dynamic' >
                <hr />
            </div>            
        </div>
    </div>

</div>